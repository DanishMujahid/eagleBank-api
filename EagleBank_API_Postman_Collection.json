{
  "info": {
    "_postman_id": "eaglebank-api-collection",
    "name": "EagleBank API",
    "description": "Complete banking API collection with user management, account operations, and transaction processing. Includes JWT authentication and comprehensive testing scenarios.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "eaglebank-api"
  },
  "item": [
    {
      "name": "üè• Health Check",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check if the server is running and healthy"
          },
          "response": []
        }
      ],
      "description": "Basic health check endpoints"
    },
    {
      "name": "üë• User Management",
      "item": [
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"firstName\": \"{{userFirstName}}\",\n  \"lastName\": \"{{userLastName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/users",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "users"]
            },
            "description": "Create a new user account. This endpoint is public and doesn't require authentication."
          },
          "response": []
        },
        {
          "name": "User Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "auth", "login"]
            },
            "description": "Authenticate user and receive JWT token. Save the token to use in subsequent requests."
          },
          "response": []
        },
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "users", "{{userId}}"]
            },
            "description": "Get user profile information. Requires JWT authentication."
          },
          "response": []
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"{{userFirstName}}\",\n  \"lastName\": \"{{userLastName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "users", "{{userId}}"]
            },
            "description": "Update user profile information. Requires JWT authentication."
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "users", "{{userId}}"]
            },
            "description": "Delete user account. This will also delete all associated accounts and transactions. Requires JWT authentication."
          },
          "response": []
        }
      ],
      "description": "User registration, authentication, and profile management"
    },
    {
      "name": "üè¶ Account Management",
      "item": [
        {
          "name": "Create Account",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accountNumber\": \"{{accountNumber}}\",\n  \"currency\": \"{{accountCurrency}}\",\n  \"type\": \"{{accountType}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/accounts",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "accounts"]
            },
            "description": "Create a new bank account. Requires JWT authentication. Account number must be unique."
          },
          "response": []
        },
        {
          "name": "List User Accounts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/accounts",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "accounts"]
            },
            "description": "Get all accounts belonging to the authenticated user. Requires JWT authentication."
          },
          "response": []
        },
        {
          "name": "Get Account Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/accounts/{{accountId}}",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "accounts", "{{accountId}}"]
            },
            "description": "Get detailed information about a specific account. Requires JWT authentication and account ownership."
          },
          "response": []
        },
        {
          "name": "Update Account",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"{{accountType}}\",\n  \"status\": \"{{accountStatus}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/accounts/{{accountId}}",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "accounts", "{{accountId}}"]
            },
            "description": "Update account information. Requires JWT authentication and account ownership."
          },
          "response": []
        },
        {
          "name": "Delete Account",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/accounts/{{accountId}}",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "accounts", "{{accountId}}"]
            },
            "description": "Delete an account. Cannot delete accounts with existing transactions. Requires JWT authentication and account ownership."
          },
          "response": []
        }
      ],
      "description": "Bank account creation, management, and operations"
    },
    {
      "name": "üí∞ Transaction Management",
      "item": [
        {
          "name": "Create Transaction",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"{{transactionType}}\",\n  \"amount\": {{transactionAmount}},\n  \"description\": \"{{transactionDescription}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/accounts/{{accountId}}/transactions",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "accounts", "{{accountId}}", "transactions"]
            },
            "description": "Create a new transaction (deposit or withdrawal). Requires JWT authentication and account ownership. Withdrawals cannot exceed available balance."
          },
          "response": []
        },
        {
          "name": "List Account Transactions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/accounts/{{accountId}}/transactions?page={{page}}&limit={{limit}}&type={{transactionType}}",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "accounts", "{{accountId}}", "transactions"],
              "query": [
                {
                  "key": "page",
                  "value": "{{page}}",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}",
                  "description": "Number of transactions per page"
                },
                {
                  "key": "type",
                  "value": "{{transactionType}}",
                  "description": "Filter by transaction type (DEPOSIT or WITHDRAWAL)"
                }
              ]
            },
            "description": "Get all transactions for a specific account with pagination and filtering. Requires JWT authentication and account ownership."
          },
          "response": []
        },
        {
          "name": "Get Transaction Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/accounts/{{accountId}}/transactions/{{transactionId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "v1",
                "accounts",
                "{{accountId}}",
                "transactions",
                "{{transactionId}}"
              ]
            },
            "description": "Get detailed information about a specific transaction. Requires JWT authentication and account ownership."
          },
          "response": []
        },
        {
          "name": "Get User Transaction History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/transactions?page={{page}}&limit={{limit}}&type={{transactionType}}",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "transactions"],
              "query": [
                {
                  "key": "page",
                  "value": "{{page}}",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}",
                  "description": "Number of transactions per page"
                },
                {
                  "key": "type",
                  "value": "{{transactionType}}",
                  "description": "Filter by transaction type (DEPOSIT or WITHDRAWAL)"
                }
              ]
            },
            "description": "Get all transactions across all accounts for the authenticated user. Requires JWT authentication."
          },
          "response": []
        }
      ],
      "description": "Financial transaction operations including deposits, withdrawals, and history"
    },
    {
      "name": "üß™ Testing Scenarios",
      "item": [
        {
          "name": "Test Insufficient Funds",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"WITHDRAWAL\",\n  \"amount\": 999999,\n  \"description\": \"Test insufficient funds error\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/accounts/{{accountId}}/transactions",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "accounts", "{{accountId}}", "transactions"]
            },
            "description": "Test the insufficient funds error by attempting to withdraw more than available balance."
          },
          "response": []
        },
        {
          "name": "Test Invalid JWT Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token_here"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/accounts",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "accounts"]
            },
            "description": "Test authentication error by using an invalid JWT token."
          },
          "response": []
        },
        {
          "name": "Test Missing Authorization",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/accounts",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "accounts"]
            },
            "description": "Test authentication error by not providing any authorization header."
          },
          "response": []
        },
        {
          "name": "Test Invalid Transaction Data",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"INVALID_TYPE\",\n  \"amount\": -100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/accounts/{{accountId}}/transactions",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "accounts", "{{accountId}}", "transactions"]
            },
            "description": "Test validation error by sending invalid transaction data."
          },
          "response": []
        }
      ],
      "description": "Error scenarios and edge cases for testing API robustness"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-generate unique values for testing",
          "if (pm.environment.get('userEmail') === undefined) {",
          "    pm.environment.set('userEmail', 'test.' + Date.now() + '@example.com');",
          "}",
          "if (pm.environment.get('accountNumber') === undefined) {",
          "    pm.environment.set('accountNumber', Math.floor(Math.random() * 90000000) + 10000000);",
          "}",
          "if (pm.environment.get('transactionAmount') === undefined) {",
          "    pm.environment.set('transactionAmount', Math.floor(Math.random() * 1000) + 100);",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-save IDs from responses for easier testing",
          "if (pm.response.code === 201 || pm.response.code === 200) {",
          "    const response = pm.response.json();",
          "    ",
          "    // Save user ID from user creation or login",
          "    if (response.data && response.data.id) {",
          "        pm.environment.set('userId', response.data.id);",
          "    }",
          "    ",
          "    // Save account ID from account creation",
          "    if (response.data && response.data.accountNumber) {",
          "        pm.environment.set('accountId', response.data.id);",
          "    }",
          "    ",
          "    // Save JWT token from login",
          "    if (response.data && response.data.token) {",
          "        pm.environment.set('jwtToken', response.data.token);",
          "    }",
          "    ",
          "    // Save transaction ID from transaction creation",
          "    if (response.data && response.data.type && (response.data.type === 'DEPOSIT' || response.data.type === 'WITHDRAWAL')) {",
          "        pm.environment.set('transactionId', response.data.id);",
          "    }",
          "}",
          "",
          "// Test response structure",
          "pm.test('Response has success field', function () {",
          "    pm.expect(pm.response.json()).to.have.property('success');",
          "});",
          "",
          "pm.test('Response has correct structure', function () {",
          "    const response = pm.response.json();",
          "    if (response.success) {",
          "        pm.expect(response).to.have.property('data');",
          "        pm.expect(response).to.have.property('message');",
          "    } else {",
          "        pm.expect(response).to.have.property('error');",
          "    }",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "userEmail",
      "value": "test.user@example.com",
      "type": "string"
    },
    {
      "key": "userPassword",
      "value": "SecurePassword123",
      "type": "string"
    },
    {
      "key": "userFirstName",
      "value": "Test",
      "type": "string"
    },
    {
      "key": "userLastName",
      "value": "User",
      "type": "string"
    },
    {
      "key": "accountNumber",
      "value": "12345678",
      "type": "string"
    },
    {
      "key": "accountCurrency",
      "value": "GBP",
      "type": "string"
    },
    {
      "key": "accountType",
      "value": "CHECKING",
      "type": "string"
    },
    {
      "key": "accountStatus",
      "value": "ACTIVE",
      "type": "string"
    },
    {
      "key": "transactionType",
      "value": "DEPOSIT",
      "type": "string"
    },
    {
      "key": "transactionAmount",
      "value": "100.50",
      "type": "string"
    },
    {
      "key": "transactionDescription",
      "value": "Test transaction",
      "type": "string"
    },
    {
      "key": "page",
      "value": "1",
      "type": "string"
    },
    {
      "key": "limit",
      "value": "10",
      "type": "string"
    }
  ]
}
