openapi: 3.0.3
info:
  title: Eagle Bank API
  description: REST API for Eagle Bank - User Management and Authentication
  version: 1.0.0
  contact:
    name: Eagle Bank Development Team
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.eaglebank.com
    description: Production server

paths:
  /v1/users:
    post:
      summary: Create a new user
      description: Create a new user account for Eagle Bank (no authentication required)
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        '400':
          description: Bad Request - Missing or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - User with this email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/auth/login:
    post:
      summary: Authenticate user
      description: Authenticate user credentials and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad Request - Missing or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    UserCreateRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          description: User's email address (must be unique)
          example: 'john.doe@example.com'
        password:
          type: string
          minLength: 8
          maxLength: 128
          description: User's password (will be hashed)
          example: 'SecurePassword123'
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's first name
          example: 'John'
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's last name
          example: 'Doe'

    UserCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/User'
        message:
          type: string
          example: 'User created successfully'

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: 'john.doe@example.com'
        password:
          type: string
          description: User's password
          example: 'SecurePassword123'

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string
              description: JWT token for authentication
              example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        message:
          type: string
          example: 'Login successful'

    User:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
          example: 'cme7n99lx0000xq4dfo41ntqc'
        email:
          type: string
          format: email
          description: User's email address
          example: 'john.doe@example.com'
        firstName:
          type: string
          description: User's first name
          example: 'John'
        lastName:
          type: string
          description: User's last name
          example: 'Doe'
        createdAt:
          type: string
          format: date-time
          description: User creation timestamp
          example: '2025-08-11T21:48:09.573Z'
        updatedAt:
          type: string
          format: date-time
          description: User last update timestamp
          example: '2025-08-11T21:48:09.573Z'

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          oneOf:
            - type: string
            - type: array
              items:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  path:
                    type: array
                    items:
                      type: string
          description: Error message or validation errors
          example: 'User with this email already exists'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /v1/auth/login endpoint

tags:
  - name: Users
    description: User management operations
  - name: Authentication
    description: User authentication operations
