openapi: 3.0.3
info:
  title: Eagle Bank API
  description: REST API for Eagle Bank - User Management, Authentication, and Bank Account Management
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    name: Eagle Bank Development Team
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.eaglebank.com
    description: Production server

paths:
  /v1/users:
    post:
      summary: Create a new user
      description: Create a new user account for Eagle Bank (no authentication required)
      tags:
        - Users
      security: [] # No authentication required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        '400':
          description: Bad Request - Missing or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - User with this email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/auth/login:
    post:
      summary: Authenticate user
      description: Authenticate user credentials and return JWT token
      tags:
        - Authentication
      security: [] # No authentication required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad Request - Missing or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/accounts:
    post:
      summary: Create a new bank account
      description: Create a new bank account for the authenticated user
      tags:
        - Accounts
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreateRequest'
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountCreateResponse'
        '400':
          description: Bad Request - Missing or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - JWT token required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Account number already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Get user's accounts
      description: Retrieve all bank accounts for the authenticated user
      tags:
        - Accounts
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Accounts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsListResponse'
        '401':
          description: Unauthorized - JWT token required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/accounts/{accountId}:
    get:
      summary: Get account details
      description: Retrieve details of a specific bank account (user must own the account)
      tags:
        - Accounts
      security:
        - BearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the account
      responses:
        '200':
          description: Account retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDetailResponse'
        '400':
          description: Bad Request - Account ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - JWT token required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User can only access their own accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update account details
      description: Update account information (user must own the account)
      tags:
        - Accounts
      security:
        - BearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdateRequest'
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountUpdateResponse'
        '400':
          description: Bad Request - Missing or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - JWT token required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User can only update their own accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete account
      description: Delete a bank account (user must own the account and it must have no transactions)
      tags:
        - Accounts
      security:
        - BearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the account
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDeleteResponse'
        '400':
          description: Bad Request - Account ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - JWT token required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User can only delete their own accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Cannot delete account with existing transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/accounts/{accountId}/transactions:
    post:
      summary: Create a transaction
      description: Create a deposit or withdrawal transaction for a specific account
      tags:
        - Transactions
      security:
        - BearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreateRequest'
      responses:
        '201':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCreateResponse'
        '400':
          description: Bad Request - Invalid transaction data or insufficient funds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - JWT token required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User can only create transactions on their own accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Get account transactions
      description: Retrieve all transactions for a specific account with pagination
      tags:
        - Transactions
      security:
        - BearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the account
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Number of transactions per page
        - name: type
          in: query
          schema:
            type: string
            enum: [DEPOSIT, WITHDRAWAL]
          description: Filter by transaction type
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsListResponse'
        '401':
          description: Unauthorized - JWT token required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/accounts/{accountId}/transactions/{transactionId}:
    get:
      summary: Get transaction details
      description: Retrieve details of a specific transaction (user must own the account)
      tags:
        - Transactions
      security:
        - BearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the account
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the transaction
      responses:
        '200':
          description: Transaction retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetailResponse'
        '400':
          description: Bad Request - Account ID and Transaction ID are required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/transactions:
    get:
      summary: Get user transaction history
      description: Retrieve user's complete transaction history across all accounts with filtering and pagination
      tags:
        - Transactions
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Number of transactions per page
        - name: accountId
          in: query
          schema:
            type: string
          description: Filter by specific account ID
        - name: type
          in: query
          schema:
            type: string
            enum: [DEPOSIT, WITHDRAWAL]
          description: Filter by transaction type
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Filter transactions from this date (ISO format)
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: Filter transactions until this date (ISO format)
      responses:
        '200':
          description: Transaction history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionHistoryResponse'
        '401':
          description: Unauthorized - JWT token required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    UserCreateRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          description: User's email address (must be unique)
          example: 'john.doe@example.com'
        password:
          type: string
          minLength: 8
          maxLength: 128
          description: User's password (will be hashed)
          example: 'SecurePassword123'
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's first name
          example: 'John'
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's last name
          example: 'Doe'

    UserCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/User'
        message:
          type: string
          example: 'User created successfully'

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: 'john.doe@example.com'
        password:
          type: string
          description: User's password
          example: 'SecurePassword123'

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string
              description: JWT token for authentication
              example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        message:
          type: string
          example: 'Login successful'

    User:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
          example: 'cme7n99lx0000xq4dfo41ntqc'
        email:
          type: string
          format: email
          description: User's email address
          example: 'john.doe@example.com'
        firstName:
          type: string
          description: User's first name
          example: 'John'
        lastName:
          type: string
          description: User's last name
          example: 'Doe'
        createdAt:
          type: string
          format: date-time
          description: User creation timestamp
          example: '2025-08-11T21:48:09.573Z'
        updatedAt:
          type: string
          format: date-time
          description: User last update timestamp
          example: '2025-08-11T21:48:09.573Z'

    Account:
      type: object
      properties:
        id:
          type: string
          description: Unique account identifier
          example: 'cme944g89000230qthpxeryn8'
        accountNumber:
          type: string
          description: Unique account number
          example: '12345678'
        balance:
          type: number
          format: float
          description: Current account balance
          example: 0
        currency:
          type: string
          enum: [GBP, USD, EUR]
          description: Account currency
          example: 'GBP'
        type:
          type: string
          enum: [CHECKING, SAVINGS, BUSINESS]
          description: Account type
          example: 'CHECKING'
        status:
          type: string
          enum: [ACTIVE, SUSPENDED, CLOSED, FROZEN]
          description: Account status
          example: 'ACTIVE'
        userId:
          type: string
          description: ID of the user who owns this account
          example: 'cme9446xp000030qtmmicmrbt'
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: '2025-08-12T22:28:04.521Z'
        updatedAt:
          type: string
          format: date-time
          description: Account last update timestamp
          example: '2025-08-12T22:28:28.867Z'

    AccountCreateRequest:
      type: object
      required:
        - accountNumber
        - currency
        - type
      properties:
        accountNumber:
          type: string
          minLength: 1
          maxLength: 20
          description: Unique account number
          example: '12345678'
        currency:
          type: string
          enum: [GBP, USD, EUR]
          description: Account currency
          example: 'GBP'
        type:
          type: string
          enum: [CHECKING, SAVINGS, BUSINESS]
          description: Account type
          example: 'CHECKING'

    AccountCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/Account'
        message:
          type: string
          example: 'Account created successfully'

    AccountUpdateRequest:
      type: object
      properties:
        currency:
          type: string
          enum: [GBP, USD, EUR]
          description: Account currency
          example: 'USD'
        type:
          type: string
          enum: [CHECKING, SAVINGS, BUSINESS]
          description: Account type
          example: 'SAVINGS'
        status:
          type: string
          enum: [ACTIVE, SUSPENDED, CLOSED, FROZEN]
          description: Account status
          example: 'SUSPENDED'

    AccountUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/Account'
        message:
          type: string
          example: 'Account updated successfully'

    AccountDetailResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          allOf:
            - $ref: '#/components/schemas/Account'
            - type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'
        message:
          type: string
          example: 'Account retrieved successfully'

    AccountsListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Account'
        message:
          type: string
          example: 'Accounts retrieved successfully'

    AccountDeleteResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Account deleted successfully'

    Transaction:
      type: object
      properties:
        id:
          type: string
          description: Unique transaction identifier
          example: 'cme944g89000230qthpxeryn9'
        type:
          type: string
          enum: [DEPOSIT, WITHDRAWAL]
          description: Transaction type
          example: 'DEPOSIT'
        amount:
          type: number
          format: float
          description: Transaction amount
          example: 100.50
        description:
          type: string
          description: Transaction description
          example: 'Salary deposit'
        accountId:
          type: string
          description: ID of the account this transaction belongs to
          example: 'cme944g89000230qthpxeryn8'
        balanceBefore:
          type: number
          format: float
          description: Account balance before transaction
          example: 500.00
        balanceAfter:
          type: number
          format: float
          description: Account balance after transaction
          example: 600.50
        createdAt:
          type: string
          format: date-time
          description: Transaction creation timestamp
          example: '2025-08-12T22:30:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: Transaction last update timestamp
          example: '2025-08-12T22:30:00.000Z'

    TransactionCreateRequest:
      type: object
      required:
        - type
        - amount
      properties:
        type:
          type: string
          enum: [DEPOSIT, WITHDRAWAL]
          description: Transaction type
          example: 'DEPOSIT'
        amount:
          type: number
          format: float
          minimum: 0.01
          maximum: 1000000
          description: Transaction amount (positive number)
          example: 100.50
        description:
          type: string
          maxLength: 255
          description: Optional transaction description
          example: 'Salary deposit'

    TransactionCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/Transaction'
        message:
          type: string
          example: 'Transaction created successfully'

    TransactionDetailResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          allOf:
            - $ref: '#/components/schemas/Transaction'
            - type: object
              properties:
                account:
                  $ref: '#/components/schemas/Account'
        message:
          type: string
          example: 'Transaction retrieved successfully'

    TransactionsListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        pagination:
          type: object
          properties:
            page:
              type: integer
              example: 1
            limit:
              type: integer
              example: 50
            total:
              type: integer
              example: 150
            pages:
              type: integer
              example: 3
        message:
          type: string
          example: 'Transactions retrieved successfully'

    TransactionHistoryResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        pagination:
          type: object
          properties:
            page:
              type: integer
              example: 1
            limit:
              type: integer
              example: 50
            total:
              type: integer
              example: 300
            pages:
              type: integer
              example: 6
        message:
          type: string
          example: 'Transaction history retrieved successfully'

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          oneOf:
            - type: string
            - type: array
              items:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  path:
                    type: array
                    items:
                      type: string
          description: Error message or validation errors
          example: 'User with this email already exists'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /v1/auth/login endpoint

tags:
  - name: Users
    description: User management operations
  - name: Authentication
    description: User authentication operations
  - name: Accounts
    description: Bank account management operations
  - name: Transactions
    description: Banking transaction operations
